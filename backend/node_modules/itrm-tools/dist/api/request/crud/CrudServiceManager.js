"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudServiceManager = void 0;
const RequestAxiosCall_1 = require("../RequestAxiosCall");
class CrudServiceManager {
    findOrCreate(details) {
        return __awaiter(this, void 0, void 0, function* () {
            let item = yield this.find(details);
            if (!item)
                item = yield this.create(details);
            return item;
        });
    }
    extractItem(response, key) {
        if (response[key] && response[key].length > 0)
            return response[key][0];
        return undefined;
    }
    extractItems(response, key) {
        let result = [];
        if (response[key] && response[key].length > 0)
            for (let item of response[key])
                result.push(item);
        return result;
    }
    sendFinding(url, config) {
        return new Promise((resolve, reject) => {
            RequestAxiosCall_1.RequestAxiosCall.get(url, config)
                .then((response) => {
                resolve(this.extractItem(response, 'result'));
            }).catch((err) => {
                reject(err);
            });
        });
    }
    sendAllFinding(url, config) {
        return new Promise((resolve, reject) => {
            RequestAxiosCall_1.RequestAxiosCall.get(url, config)
                .then((response) => {
                resolve(this.extractItems(response, 'result'));
            }).catch((err) => {
                reject(err);
            });
        });
    }
    sendCreation(url, body, config) {
        return new Promise((resolve, reject) => {
            RequestAxiosCall_1.RequestAxiosCall.post(url, body, config)
                .then((response) => {
                resolve(this.extractItem(response, 'items'));
            }).catch((err) => {
                reject(err);
            });
        });
    }
    sendModification(url, modification, config) {
        return new Promise((resolve, reject) => {
            RequestAxiosCall_1.RequestAxiosCall.put(url, Object.assign({}, modification), config)
                .then((response) => {
                resolve(response);
            }).catch((err) => {
                reject(err);
            });
        });
    }
    sendDestuction(url, config) {
        return new Promise((resolve, reject) => {
            RequestAxiosCall_1.RequestAxiosCall.delete(url, config)
                .then((response) => {
                resolve(response);
            }).catch((err) => {
                reject(err);
            });
        });
    }
}
exports.CrudServiceManager = CrudServiceManager;
//# sourceMappingURL=CrudServiceManager.js.map